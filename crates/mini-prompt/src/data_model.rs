//! Wire-format types to use when driving LLM APIs.

use serde::{Deserialize, Serialize};

/// Describes the source of a chat message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Default)]
#[serde(rename_all = "snake_case")]
pub enum MessageRole {
    System,
    #[default]
    User,
    Assistant,
    Tool,
}

/// The serialized format representing the output of a turn in an LLM conversation.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatMessage {
    /// Role: system, user, assistant, tool
    pub role: MessageRole,

    /// Content of the message, optional when using tool calls
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,

    /// The tool calls generated by the model, such as function calls.
    ///
    /// Typically invoked from a model: i.e. role == `assistant`
    #[serde(skip_serializing_if = "Vec::is_empty", default)]
    pub tool_calls: Vec<ToolCall>,

    /// Tool call that this message is responding to.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tool_call_id: Option<String>,

    /// Name of the actor, typically set to the responding function if a tool call response
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl ChatMessage {
    pub fn user<S: Into<String>>(s: S) -> Self {
        ChatMessage {
            role: MessageRole::User,
            content: Some(s.into()),
            tool_calls: vec![],
            tool_call_id: None,
            name: None,
        }
    }
    pub fn system<S: Into<String>>(s: S) -> Self {
        ChatMessage {
            role: MessageRole::System,
            content: Some(s.into()),
            tool_calls: vec![],
            tool_call_id: None,
            name: None,
        }
    }
    pub fn tool<S: Into<String>>(s: S) -> Self {
        ChatMessage {
            role: MessageRole::Tool,
            content: Some(s.into()),
            tool_calls: vec![],
            tool_call_id: None,
            name: None,
        }
    }
}

/// Describes an invocation of some tool.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolCall {
    /// The ID of the tool call.
    pub id: String,
    /// The type of the tool, must be `function`.
    pub r#type: ToolCallType,
    /// The function that the model called.
    pub function: FunctionCall,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Default)]
#[serde(rename_all = "snake_case")]
pub enum ToolCallType {
    #[default]
    Function,
}

/// Describes the invocation of some function, typically 1:1 within a [ToolCall].
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct FunctionCall {
    pub name: String,
    pub arguments: String,
}

#[derive(Clone, Debug, Default, Serialize, Deserialize)]
pub(crate) struct OpenrouterProvider {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub ignore: Vec<String>,
}

/// Describes a tool available in a model call.
#[derive(Clone, Debug, Serialize)]
pub struct Tool {
    /// Must be `function`
    pub r#type: String,
    pub function: FunctionInfo,
}

impl From<FunctionInfo> for Tool {
    fn from(fi: FunctionInfo) -> Self {
        Tool {
            r#type: "function".into(),
            function: fi,
        }
    }
}

/// Describes the schema of a tool (function call) available for a model to call.
#[derive(Debug, Clone, Serialize)]
pub struct FunctionInfo {
    /// A description of what the function does.
    pub description: String,
    /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    pub name: Option<String>,
    /// The parameters the functions accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format.
    /// To describe a function that accepts no parameters, provide the value {"type": "object", "properties": {}}.
    pub parameters: serde_json::Value,
}

impl FunctionInfo {
    pub fn new<S: Into<String>>(
        name: S,
        description: S,
        parameters: Option<serde_json::Value>,
    ) -> Self {
        Self {
            name: Some(name.into()),
            description: description.into(),
            parameters: match parameters {
                Some(p) => p,
                None => serde_json::json!({"type": "object", "properties": {}}),
            },
        }
    }
}

#[derive(Debug, Clone, Serialize, PartialEq, Eq, Default)]
#[serde(rename_all = "snake_case")]
pub enum ToolChoice {
    #[default]
    None,
    Auto,
}

/// A request to the OpenAI Chat Completions API.
#[derive(Debug, Clone, Serialize)]
pub(crate) struct CompletionsRequest {
    /// Model identifier to use for completion
    pub model: String,

    /// Openrouter-specific parameter.
    pub provider: OpenrouterProvider,

    /// Model input and output
    pub messages: Vec<ChatMessage>,

    /// The list of tools the model can use
    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub tools: Vec<Tool>,

    /// Explicitly enables or disables function calling.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tool_choice: Option<ToolChoice>,
}

impl Default for CompletionsRequest {
    fn default() -> Self {
        Self {
            model: <crate::models::Gemma27B3 as crate::models::OpenrouterModel>::MODEL_STR
                .to_string(),
            messages: vec![],
            tools: vec![],
            tool_choice: None,
            provider: OpenrouterProvider {
                ignore: vec!["Nebius".into(), "Kluster".into(), "DeepInfra".into()],
            },
        }
    }
}

/// A response from the OpenAI Completions API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CompletionsResponse {
    /// Unique ID
    #[serde(default)]
    pub id: String,

    /// Object type, always "chat.completion"
    pub object: Option<String>,

    #[serde(default)]
    pub created: u64,
    #[serde(default)]
    pub model: String,

    /// Array of completion choices
    #[serde(default)]
    pub choices: Vec<ChatChoice>,
}

/// The serialized description of a response from the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatChoice {
    /// Index of this choice in the array of choices
    pub index: usize,

    /// The message generated by the model
    pub message: ChatMessage,

    /// Reason why the model stopped generating
    pub finish_reason: FinishReason,
}

/// Describes the reason a model stopped providing tokens.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Default)]
#[serde(rename_all = "snake_case")]
pub enum FinishReason {
    #[default]
    Stop,
    ToolCalls,
    Length,
    ContentFilter,
}
